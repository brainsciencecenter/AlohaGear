#!/bin/bash

#
# alohaDriver -v -o none 66e4737e1b4b58bc3236d6d1
# where  66e4737e1b4b58bc3236d6d1 is a subject id
# just generats the AlohaInputs.json file
#
# alohaDriver -v -o site 66e4737e1b4b58bc3236d6d1
# generates the AlohaInputs.json file and uploads to the flywheel subject
#
# alohaDriver -v -u 66e4737e1b4b58bc3236d61d
# regenerate the json files which take a long time to dig out of flywheel
#
# alohaDriver -v -d 66e4737e1b4b58bc3236d61d
# Just download the aloha input files
#
# alohaDriver -v -r 66e4737e1b4b58bc3236d61d
# Run the aloha script
#
# -a download AlohaInputs.json from the flywheel subject container 
# -d download input files
# -f fake gear runs - comma separated list of job ids to use instead of actually running a gear
#    T1Dcm2Niix,T1Necktrim,T2Dcm2Niix,AshsPmcT1,AshsPmcT2
#    Gearnames are not case sensative
# -n no-op
# -o [site|stdout|none]
#     create AlohaInputs.json and upload it to the flywheel site, print to stdout, neither
#     the AlohaInputs.json file will not be created unless -o is part of the command line
# -r run aloha code
# -u update files that take a long time to get
# -v verbose

CmdName=$(basename "$0")

FwDir=$(dirname $(dirname $(which fwget)))
FwLibDir="${FwDir}/lib"

function sys {
    [ -n "${opt_n}${opt_v}" ] && echo "$@" 1>&2
    [ -n "$opt_n" ] || "$@"
}

while getopts adf:no:ruv arg
do
	case "$arg" in
	     a|d|f|n|o|r|u|v)
		eval "opt_${arg}='${OPTARG:=1}'"
		;;
	esac
done

shift $(( "$OPTIND" - 1 ))

[ "$opt_u" ] && UpdateAll=1

TmpDir="/tmp/Aloha"
[ -e "$TmpDir" ] || mkdir -p "$TmpDir"
AlohaInputsJsonFile="${TmpDir}/AlohaInputs.json"

AlohaWorkDir="${TmpDir}/Work"
[ -e "$AlohaWorkDir" ] || mkdir -p "$AlohaWorkDir"

SubjectId="$1"
SubjectJsonFile="${TmpDir}/Subject.json"

if [ ! \( \( -e "$SubjectJsonFile" \) -a \( -s "$SubjectJsonFile" \) \) ] || [ -n "$UpdateAll" ] 
then
	sys fwget -1 -raGz "$SubjectId" > "$SubjectJsonFile"
	if [ "$?" != 0 ]
	then
		echo "${CmdName} : failed getting subject '$SubjectId'" 1>&2
		exit 1
	fi
fi
SubjectLabel=$(jq -r '.label' "$SubjectJsonFile")
Group=$(jq -r '.parents.group' "$SubjectJsonFile")
ProjectId=$(jq -r '.parents.project' "$SubjectJsonFile")
ProjectLabel=$(fwget -1 "$ProjectId" | jq -r '.label')
GearTags='extra-large'

if [ -n "$opt_o" ]
then
    SortedSessionsJsonFile="${TmpDir}/SortedSessions.json"
    jq -r  -L "$FwLibDir" -f alohaSortSessions.jq "$SubjectJsonFile" > "$SortedSessionsJsonFile"
    
    # *** Don't need acquisition info as that will be in the T1/T2 stanzas
    BaselineJson=$(jq -r '.Baseline' "$SortedSessionsJsonFile")
    if [ -z "$BaselineJson" ]
    then
    	echo "${CmdName} : Missing Baseline session" 1>&2
    	exit 2
    fi
    
    FollowupCount=$(jq -r '.Followups | length' "$SortedSessionsJsonFile")
    if [ 0 -ge "$FollowupCount" ]
    then
    	echo "${CmdName} : Missing Followup sessions" 1>&2
    	exit 3
    fi
    
    BaselineSessionId=$(echo "$BaselineJson" | jq -r '.SessionId')
    BaselineSessionJsonFile="${TmpDir}/BaselineSession.json"
    jq -r '..|select(._id == "'"$BaselineSessionId"'")?' "$SubjectJsonFile" > "$BaselineSessionJsonFile"
    
    BaselineJobsJsonFile="${TmpDir}/BaselineJobs.json"
    BaselineJobsJsonTmpFile="${TmpDir}/BaselineJobs.json.tmp"
    if [ ! \( \( -e "$BaselineJobsJsonFile" \) -a \( -s "$BaselineJobsJsonFile" \) \) ] || [ -n "$UpdateAll" ]
    then
	# Need -r to get the output file id
    	sys fwfind -1 -j -r session="$BaselineSessionId" > "$BaselineJobsJsonTmpFile"
    	if [ "$?" != 0 ]
    	then
    		echo "${CmdName} : failed getting finding jobs for '$SessionLabel' ($SessionId)" 1>&2
    		exit 1
    	fi
	[ -s "$BaselineJobsJsonTmpFile" ] && mv "$BaselineJobsJsonTmpFile" "$BaselineJobsJsonFile"
    fi

    #
    # Baseline extraction
    # grab the most recent ashs PMC-T2 run
    # If there is one,
    #   Set the AshsPmcT2JobId and you have all the baseline inputs for aloha
    # else
    #   Find the T1 dicom, convert to nifti, necktrim, ashs-pmc-t1
    #   Find the T2 dicom, convery to nifti, ashs-pmc-t2
    #   Set the AshsPmcT2JobId
    #

    #
    # Find the last ASHS PMC-T2 run on this session, and grab the JobId.
    BaselineAshsPmcT2JobId=$(jq  -s -r '[ .[] | select( (.gear_info.name == "ashs") and (.detail.state == "complete") and (.config.config.ASHS_Atlases == "ASHS-PMC-T2") ) ] | sort_by(.created) | last | ._id' "$BaselineJobsJsonFile")
    if [ -z "$BaselineAshsPmcT2JobId" ]
    then
	true
	#
	# Then ashs PMC-T2 hasn't been run and we need to:
	# Find a T1/T2 dicom AlohaInput in this session
	# Convert T1/T2 dicom to nifti
	# Necktrim T1 nifti
	# Run ashs PMC-T1 on T1NiftiTrimmed
	# Run ashs PMC-T2 on T1NiftiTrimmed and T2Nifti
	# Set the BaselineAshsPmcT2JobId
    fi
    
    BaselineT2LeftSegmentationJson=$( jq -r --argjson JobId "\"$BaselineAshsPmcT2JobId\"" 'select(._id == $JobId)' "$BaselineJobsJsonFile" | jq --argjson AlohaArgFlag '"-t"' -f alohaJob2FileIds.jq | jq --argjson Handedness '"Left"' '.Outputs[] | select(.FileModality == "SEG" and (.FileName | test("lfseg_heur")) and (.FileTags | any(. == $Handedness)) )' )
    if [ -z "$BaselineT2LeftSegmentationJson" ] || [ "$BaselineT2LeftSegmentationJson" = "null" ]
    then
    	echo "${CmdName} : Missing baseline T2 Left Segmentation" 1>&2
    	exit 4
    fi

    BaselineT2RightSegmentationJson=$( jq -r --argjson JobId "\"$BaselineAshsPmcT2JobId\"" 'select(._id == $JobId)' "$BaselineJobsJsonFile" | jq --argjson AlohaArgFlag '"-u"' -f alohaJob2FileIds.jq | jq --argjson Handedness '"Right"' '.Outputs[] | select(.FileModality == "SEG" and (.FileName | test("lfseg_heur")) and (.FileTags | any(. == $Handedness)) )' )    
    if [ -z "$BaselineT2RightSegmentationJson" ] || [ "$BaselineT2RightSegmentationJson" = "null" ]
    then
    	echo "${CmdName} : Missing baseline T2 Right Segmentation" 1>&2
    	exit 5
    fi

    BaselineT1NiftiTrimmedJson=$(jq -r --argjson JobId "\"$BaselineAshsPmcT2JobId\"" 'select(._id == $JobId)' "$BaselineJobsJsonFile" | jq --argjson AlohaArgFlag '"-b"'  -f alohaJob2FileIds.jq | jq -r --argjson ClassificationMeasurement '"T1"' '.Inputs[] | select( (.FileType == "nifti") and (.FileTags | any(. == "Trimmed")) and (.FileClassificationMeasurement | test($ClassificationMeasurement)) )')
    if [ -z "$BaselineT1NiftiTrimmedJson" ] || [ "$BaselineT1NiftiTrimmedJson" = "null" ]
    then
    	echo "${CmdName} : Missing baseline T1 Nifti Trimmed input" 1>&2
    	exit 6
    fi

    BaselineT2NiftiJson=$(jq -r --argjson JobId "\"$BaselineAshsPmcT2JobId\"" 'select(._id == $JobId)' "$BaselineJobsJsonFile" | jq --argjson AlohaArgFlag '"-c"' -f alohaJob2FileIds.jq | jq -r --argjson ClassificationMeasurement '"T2"' '.Inputs[] | select( (.FileType == "nifti")  and (.FileClassificationMeasurement | test($ClassificationMeasurement)) )' )
    if [ -z "$BaselineT2NiftiJson" ] || [ "$BaselineT2NiftJson" = "null" ]
    then
    	echo "${CmdName} : Missing baseline T2 Nifti input" 1>&2
    	exit 7
    fi

    BaselineAshsPmcT1JobId=$( jq  -s -r '[ .[] | select( (.gear_info.name == "ashs") and (.detail.state == "complete") and (.config.config.ASHS_Atlases == "ASHS-PMC-T1") ) ] | sort_by(.created) | last | ._id' "$BaselineJobsJsonFile")
    if [ -z "$BaselineAshsPmcT1JobId" ] || [ "$BaselineAshsPmcT1JobId" = "null" ]
    then
    	echo "${CmdName} : Missing baseline ASHS-PMC-T1 job" 1>&2
    	exit 8
    fi

    BaselineT1LeftSegmentationJson=$( jq -r --argjson JobId "\"$BaselineAshsPmcT1JobId\"" 'select(._id == $JobId)' "$BaselineJobsJsonFile" | jq --argjson AlohaArgFlag '"-r"' -f alohaJob2FileIds.jq | jq --argjson Handedness '"Left"' '.Outputs[] | select(.FileModality == "SEG" and (.FileName | test("lfseg_heur")) and (.FileTags | any(. == $Handedness)) )' )
    if [ -z "$BaselineT1LeftSegmentationJson" ] || [ "$BaselineTLeftSegmentationJson" = "null" ]
    then
    	echo "${CmdName} : Missing baseline T1 Left Segmentation" 1>&2
    	exit 9
    fi

    BaselineT1RightSegmentationJson=$( jq -r --argjson JobId "\"$BaselineAshsPmcT1JobId\"" 'select(._id == $JobId)' "$BaselineJobsJsonFile" | jq --argjson AlohaArgFlag '"-s"' -f alohaJob2FileIds.jq | jq --argjson Handedness '"Right"' '.Outputs[] | select(.FileModality == "SEG" and (.FileName | test("lfseg_heur")) and (.FileTags | any(. == $Handedness)) )' )
    if [ -z "$BaselineT1RightSegmentationJson" ] || [ "$BaselineT1RightSegmentationJson" = "null" ]
    then
    	echo "${CmdName} : Missing baseline T1 Right Segmentation" 1>&2
    	exit 10
    fi


fi


    
    #
    # Followup Session Info should include session data
    #
    JobDate=$(date +%Y-%m-%dT%H:%M:%S%:z)
    JobLabel=Aloha
    JobId=
    
    JobJson="{\"JobLabel\": \"$JobLabel\", \"JobId\": \"$JobId\", \"JobDate\": \"$JobDate\"}"
    
    BaselineJsonFile="${TmpDir}/Baseline.json"
    jq -r -n	 --argjson JobInfo "$JobJson"							\
    		 --argjson Baseline "$BaselineJson"						\
    		 --argjson BaselineT1 "$BaselineT1NiftiTrimmedJson"				\
      		 --argjson BaselineT2 "$BaselineT2NiftiJson"					\
          	 --argjson BaselineT1LeftSegmentation "$BaselineT1LeftSegmentationJson" 	\
          	 --argjson BaselineT1RightSegmentation "$BaselineT1RightSegmentationJson" 	\
          	 --argjson BaselineT2LeftSegmentation "$BaselineT2LeftSegmentationJson" 	\
          	 --argjson BaselineT2RightSegmentation "$BaselineT2RightSegmentationJson" 	\
          		   '    { "JobInfo": $JobInfo} + {"Baseline": (
    		   	       $Baseline 
    			       + {
    			          "T1": $BaselineT1
     			        , "T2": $BaselineT2
     			        , "T1LeftSegmentation": $BaselineT1LeftSegmentation
     			        , "T1RightSegmentation": $BaselineT1RightSegmentation
     			        , "T2LeftSegmentation": $BaselineT2LeftSegmentation
     			        , "T2RightSegmentation": $BaselineT2RightSegmentation
    			          })
     			 }'									\
			 > "$BaselineJsonFile"

    FollowupsJsonFile="${TmpDir}/Followups.json"
    for FollowupSessionId in $(jq -r '.Followups[] | .SessionId' "$SortedSessionsJsonFile")
    do
	#
	# Single Followup Session
	#
    	FollowupSessionJsonFile="${TmpDir}/FollowupSession.json"
    	jq -r '..|select(._id == "'"$FollowupSessionId"'")?' "$SubjectJsonFile" > "$FollowupSessionJsonFile"
	if [ -S "$FollowupSessionJsonFile" ]
	then
	    echo "${CmdName}: No followup session found" 1>&2
	    exit 11
	fi

	#
	# SessionId, SessionLabel, SessionScanDateTime
	#
    	FollowupJson=$(jq -r -L "$FwLibDir" 'include "FwLib"; ..|select(._id == "'"$FollowupSessionId"'")? | ({"SessionId": ._id, "SessionLabel": .label, "SessionScanDateTime": sessionScanDateTime(.)})' "$SubjectJsonFile")
    
    	FollowupSessionLabel=$(echo "$FollowupJson" | jq -r '.SessionLabel')
        [ -n "$opt_v" ] && echo "FollowupSession = '${FollowupSessionLabel}(${FollowupSessionId})'" 1>&2
    
    	FollowupT1NiftiTrimmedJson=$(jq -r --argjson AlohaArgFlag '"-f"' --argjson ClassificationMeasurement '"T1"' -f alohaFindT1T2.jq  "$FollowupSessionJsonFile" | jq -r 'select( (.FileType == "nifti") and (.FileTags | any(. == "Trimmed")) ) ')
	if [ -z "$FollowupT1NiftiTrimmedJson" ]
	then
	    # Need to find the T1 Dicom AlohaInput for this session, if there is one
	    # convert it to nifti, this may be redundant, but it only takes a moment
	    # then trim the neck and rebuild the Followup Jobs/Session file ??
	    # 
	    FollowupT1DicomFileId=$(echo "$FollowupT1DicomJson" | jq -r '.FileId')
	    FollowupT1NiftiFileId=$(jq -s --argjson InputFileId "\"$FollowupT1DicomFileId\"" --argjson GearName '"dcm2niix"' --argjson FileType '"nifti"' -r -f alohaInputFileId2JobOutputFileIds.jq "$FollowupJobsJsonFile")
	    if [ -z "$FollowupT1NiftiFileId" ]
	    then
		if [ -n $opt_f ] && (echo "$opt_f" | grep -i -q "T1Dcm2Niix")
		then
		    FollowupT1Dicom2NiftiJobId=$FakeFollowupT1Dicom2NiftiJobId
		else
		    FollowupT1Dicom2NiftiJobId=$(sys fwRunGear -w -t "$GearTags" -g dcm2niix -i dcm2niix_input "$FollowupT1DicomFileId")
		fi
	 
		FollowupT1NiftiFileId=$(fwget -1 -j "$FollowupT1Dicom2NiftiJobId" | jq -r '.outputs[] | select(.type == "nifti") | .file_id')
		FollowupT1DicomTags=$(fwTag "$FollowupT1DicomFileId")

    		sys fwfind -1 -j -r session="$FollowupSessionId" > "$FollowupJobsJsonTmpFile"
    		if [ "$?" != 0 ]
    		then
    		    echo "${CmdName} : failed getting finding jobs for '$SessionLabel' ($SessionId)" 1>&2
    		    exit 1
    		fi
		[ -s "$FollowupJobsJsonTmpFile" ] && mv "$FollowupJobsJsonTmpFile" "$FollowupJobsJsonFile"
	 
		echo "fwTag -t $FollowupT1DicomTags $FollowupT1NiftiFileId" | od -bc
	    
		# Set new nifti file to be an AlohaInput
		[ -n "$FollowupT1DicomTags" ] && sys fwTag -t "$FollowupT1DicomTags" "$FollowupT1NiftiFileId"
	    fi
   
	    FollowupT1NiftiTrimmedFileId=$(jq -s --argjson InputFileId "\"$FollowupT1NiftiFileId\"" --argjson GearName '"necktrim"' -r '[ .[] | select( (.gear_info.name == $GearName) and (.config.inputs[].object.file_id == $InputFileId) )] | sort_by(.created) | if (length > 0) then (last | [ .outputs[] | select(.type == "nifti")] | last | .file_id) else empty end ' "$FollowupJobsJsonFile")
	    if [ -z "$FollowupT1NiftiTrimmedFileId" ]
	    then
		if [ -n $opt_f ] && (echo "$opt_f" | grep -i -q "T1Necktrim")
		then
		    FollowupT1NiftiTrimmedJobId="$FakeFollowupT1NiftiTrimmedJobId"
		else
		    FollowupT1NiftiTrimmedJobId=$(sys fwRunGear -w -t "$GearTags" -g necktrim -i file "$FollowupT1NiftiFileId")
		fi

		FollowupT1NiftiTrimmedFileId=$(fwget -1 -j "$FollowupT1NiftiTrimmedJobId" | jq -r '.outputs[] | select(.type == "nifti") | .file_id')
		if [ -z "$FollowupT1NiftiTrimmedFileId" ]
		then
		    echo "${CmdName} : missing FollowupT1NiftiTrimmedFileId which really should have been there" 1>&2
		    exit 2
		fi

    		sys fwfind -1 -j -r session="$FollowupSessionId" > "$FollowupJobsJsonTmpFile"
    		if [ "$?" != 0 ]
    		then
    		    echo "${CmdName} : failed getting finding jobs for '$SessionLabel' ($SessionId)" 1>&2
    		    exit 1
    		fi
		[ -s "$FollowupJobsJsonTmpFile" ] && mv "$FollowupJobsJsonTmpFile" "$FollowupJobsJsonFile"
	    fi
	    FollowupT1NiftiTrimmedJson=$(jq -r --argjson AlohaArgFlag '"-f"' --argjson ClassificationMeasurement '"T1"' -f alohaFindT1T2.jq "$FollowupSessionJsonFile" | jq -r 'select( (.FileType == "nifti") and (.FileTags | any(. == "Trimmed")) )'  )
	fi

    	FollowupT2NiftiJson=$(jq -r --argjson AlohaArgFlag '"-g"' --argjson ClassificationMeasurement '"T2"' -f alohaFindT1T2.jq  "$FollowupSessionJsonFile" | jq -r 'select( .FileType == "nifti" ) ')
	if [ -z "$FollowupT2NiftiJsonx" ]
	then
    	    FollowupT2DicomJson=$(jq -r --argjson AlohaArgFlag '"-g"' --argjson ClassificationMeasurement '"T2"' -f alohaFindT1T2.jq  "$FollowupSessionJsonFile" | jq -r 'select( (.FileType == "archive") or (.FileType == "dicom") ) ')
	    if [ -z "$FollowupT2DicomJson" ]
	    then
		echo "${CmdName} : Missing Followup T2 for ${FollowupSessionLabel}(${FollowupSessionId}). Skipping" 1>&2
		FollowupT2NiftiJson='{ "Missing": true }'
	    else
		FollowupT2DicomFileId=$(echo "$FollowupT2DicomJson" | jq -r '.FileId')
		FollowupT2Dicom2NiftiJobId=$(sys fwRunGear -w -t "$GearTags" -g dcm2niix -i dcm2niix_input "$FollowupT2DicomFileId")
    		if [ "$?" != 0 ]
    		then
    		    echo "${CmdName} : fwRunGear failed fwRunGear -w -t '$GearTags' -g dcm2niix -i dcm2niix_input '$FollowupT2DicomFileId'" 1>&2
    		    exit 1
    		fi
		
		FollowupT2NiftiFileId=$(fwget -1 -j "$FollowupT2Dicom2NiftiJobId" | jq -r '.outputs[] | select(.type == "nifti") | .file_id')
	    
		FollowupT2DicomTags=$(fwTag "$FollowupT2DicomFileId")

		#
		# fwTag needs the -q to keep the tags from being added to the followup json
		#
		[ -n "$FollowupT2DicomTags" ] && sys fwTag -q -t "$FollowupT2DicomTags" "$FollowupT2NiftiFileId"

		sys fwget -1 -raGz "$FollowupSessionId" > "$FollowupSessionJsonFile"

		FollowupT2NiftiJson=$(jq -r --argjson AlohaArgFlag '"-g"' --argjson ClassificationMeasurement '"T2"' -f alohaFindT1T2.jq  "$FollowupSessionJsonFile" | jq -r 'select( .FileType == "nifti" ) ')
	    fi
	fi

    	jq -r -n --argjson Followup "$FollowupJson"				\
    	      	 --argjson FollowupT1 "$FollowupT1NiftiTrimmedJson"		\
    	         --argjson FollowupT2 "$FollowupT2NiftiJson"			\
    		 '$Followup + {"T1": $FollowupT1, "T2": $FollowupT2}' >> /tmp/Aloha/FollowupsTrace.json

    	jq -r -n --argjson Followup "$FollowupJson"				\
    	      	 --argjson FollowupT1 "$FollowupT1NiftiTrimmedJson"		\
    	         --argjson FollowupT2 "$FollowupT2NiftiJson"			\
    		 '$Followup + {"T1": $FollowupT1, "T2": $FollowupT2}'

    done | tee /tmp/trace |  jq -s '{"Followups": . }' > "$FollowupsJsonFile"
    
    jq -r -n --slurpfile Baseline "$BaselineJsonFile" --slurpfile Followups "$FollowupsJsonFile" '($Baseline[]) + ($Followups[])' > "$AlohaInputsJsonFile"
    
    if echo "$opt_o" | grep -qi 'stdout'
    then
        cat "$AlohaInputsJsonFile"
    fi
    
    if echo "$opt_o" | grep -qi 'site'
    then
        sys fwuploadfile -p "$SubjectId" "$AlohaInputsJsonFile"
    fi

    exit

FollowupDir="${TmpDir}/Followups"

if [ -n "$opt_a" ]
then
    AlohaInputsJsonFilename=$(basename "$AlohaInputsJsonFile")
    AlohaInputsJsonFileId=$(fwget -1 -raz "$SubjectId" | jq -r '.files[] | select(.name == "'"$AlohaInputsJsonFilename"'") | .file_id')
    sys fwget -v -f --download --download-dir "$TmpDir" "$AlohaInputsJsonFileId"
fi

BaselineJsonFile="${TmpDir}/Baseline.json"
if [ -e "$AlohaInputsJsonFile" ] && [ -s "$AlohaInputsJsonFile" ]
then
    jq -r '.Baseline' "$AlohaInputsJsonFile" > "$BaselineJsonFile"
fi

DownloadedAllFiles=true
if [ -n "$opt_d" ]
then
    for FileId in $(jq -r '..|.FileId? | select(.)' $BaselineJsonFile)
    do
        sys fwget -v -f --download --download-dir "$BaselineDir" "$FileId"
        if [ "$?" != 0 ]
        then
    	    echo "${CmdName} : downloading file '$FileId' failed" 1>&2
    	    DownloadAllFiles=false
        fi
    done
    
    for FollowupSessionId in $(jq -r '.Followups[].SessionId' "$AlohaInputsJsonFile")
    do
            [ -n "$opt_v" ] && echo "FollowupSessionId = '$FollowupSessionId'" 1>&2
    
    	FollowupSessionLabel=$(jq -r '.Followups[] | select(.SessionId == "'"$FollowupSessionId"'") | .SessionLabel' "$AlohaInputsJsonFile")
    	
    	FollowupSessionDir="${FollowupDir}/${FollowupSessionLabel}"
    	[ -e "$FollowupSessionDir" ] || mkdir -p "$FollowupSessionDir"
    
    	FollowupSessionJsonFile="${FollowupSessionDir}/FollowupSession.json"
    	jq -r '.Followups[] | select(.SessionId == "'"$FollowupSessionId"'")' "$AlohaInputsJsonFile" > "$FollowupSessionJsonFile"
    	
    	for FileId in $(jq -r '..|.FileId? | select(.)' "$FollowupSessionJsonFile")
    	do
    	    sys fwget -v -f --download --download-dir "$FollowupSessionDir" "$FileId"
    	    if [ "$?" != 0 ]
	    then
    		echo "${CmdName} : downloading file '$FileId' failed" 1>&2
    		DownloadAllFiles=false
    	    fi
        done
    done
fi

if [ -n "$opt_r" ]
then
	AlohaBaselineArgs=()

	BaselineSessionScanDateTime=$(jq -r '.Baseline.SessionScanDateTime' "$AlohaInputsJsonFile")
	BaselineSessionScanDate=$(date -d "$BaselineScanDateTime" "+%Y-%m-%d")

	# *** Should verify aspect ratios for T1/T2 are acceptable

	#skip the session info keys
	for k in $(jq -r '.Baseline | keys[] as $k | select((.[$k]|type) == "object") | $k' "$AlohaInputsJsonFile")
	do
		AlohaArgFlag=$(jq -r '.Baseline.'"$k"' | .AlohaArgFlag' "$AlohaInputsJsonFile")
		FileName=$(jq -r '.Baseline.'"$k"' | .FileName' "$AlohaInputsJsonFile")
		InputFilePath="${BaselineDir}/${FileName}"
		AlohaBaselineArgs+=( "$AlohaArgFlag" "$InputFilePath" )
	done

	AlohaFollowupArgs=()
	for FollowupSessionId in $(jq -r '.Followups[].SessionId' "$AlohaInputsJsonFile")
	do
	    RunAloha=true

    	    FollowupSessionScanDateTime=$(jq -r '.Followups[] | select(.SessionId == "'"$FollowupSessionId"'") | .SessionScanDateTime' "$AlohaInputsJsonFile")
	    if [ -z "$FollowupSessionScanDateTime" ] || [ "$FollowupSessionScanDateTime" = 'null' ]
	    then
		echo "${CmdName} : No FollowupSessionScanDateTime for '${FollowupSessionLabel}(${FollowupSessionId})'" 1>&2
	    fi

	    FollowupSessionScanDate=$(date -d "$FollowupScanDateTime" "+%Y-%m-%d")

    	    FollowupSessionLabel=$(jq -r '.Followups[] | select(.SessionId == "'"$FollowupSessionId"'") | .SessionLabel' "$AlohaInputsJsonFile")
	    if [ -z "$FollowupSessionLabel" ] || [ "$FollowupSessionLabel" = 'null' ]
	    then
		echo "${CmdName} : No FollowupSessionLabel for '${FollowupSessionLabel}(${FollowupSessionId})'" 1>&2
 										    
		RunAloha=false
	    fi

            [ -n "$opt_v" ] && echo "${CmdName} : FollowupSessionLabel = '$FollowupSessionLabel'" 1>&2
    
	    FollowupSessionT1AlohaArgFlag=$(jq -r '.Followups[] | select(.SessionId == "'"$FollowupSessionId"'") | .T1.AlohaArgFlag' "$AlohaInputsJsonFile")
	    if [ -z "$FollowupSessionT1AlohaArgFlag" ] || [ "$FollowupSessionT1AlohaArgFlag" = 'null' ]
	    then
		echo "${CmdName} : No FollowupSessionT1AlohaFlag for '${FollowupSessionLabel}(${FollowupSessionId})'" 1>&2
 										    
		RunAloha=false
	    fi

	    FollowupSessionT1FileName=$(jq -r '.Followups[] | select(.SessionId == "'"$FollowupSessionId"'") | .T1.FileName' "$AlohaInputsJsonFile")
	    if [ -z "$FollowupSessionT1FileName" ] || [ "$FollowupSessionT1FileName" = 'null' ]
	    then
		echo "${CmdName} : No FollowupSessionT1FileName for '${FollowupSessionLabel}(${FollowupSessionId})'" 1>&2
 										    
		RunAloha=false
	    fi

	    FollowupSessionT2AlohaArgFlag=$(jq -r '.Followups[] | select(.SessionId == "'"$FollowupSessionId"'") | .T2.AlohaArgFlag' "$AlohaInputsJsonFile")
	    if [ -z "$FollowupSessionT2AlohaArgFlag" ] || [ "$FollowupSessionT2AlohaArgFlag" = 'null' ]
	    then
		echo "${CmdName} : No FollowupSessionT2AlohaArgFlag for '${FollowupSessionLabel}(${FollowupSessionId})'" 1>&2
 										    
		RunAloha=false
	    fi

	    FollowupSessionT2FileName=$(jq -r '.Followups[] | select(.SessionId == "'"$FollowupSessionId"'") | .T2.FileName' "$AlohaInputsJsonFile")
	    if [ -z "$FollowupSessionT2FileName" ] || [ "$FollowupSessionT2FileName" = 'null' ]
	    then
		echo "${CmdName} : No FollowupSessionT2FileName for '${FollowupSessionLabel}(${FollowupSessionId})'" 1>&2
 										    
		RunAloha=false
	    fi

	    [ -n "$opt_v" ] && echo "${CmdName} : RunAloha = '$RunAloha'" 1>&2
	    
	    if [ "$RunAloha" = 'true' ]
	    then
    		FollowupSessionDir="${FollowupDir}/${FollowupSessionLabel}"
    		FollowupSessionT1FilePath="${FollowupSessionDir}/${FollowupSessionT1FileName}"
    		FollowupSessionT2FilePath="${FollowupSessionDir}/${FollowupSessionT2FileName}"

		AlohaFollowupArgs+=( "$FollowupSessionT1AlohaArgFlag" "$FollowupSessionT1FilePath" )
		AlohaFollowupArgs+=( "$FollowupSessionT2AlohaArgFlag" "$FollowupSessionT2FilePath" )

		sys aloha_main.sh "${AlohaBaselineArgs[@]}" "${AlohaFollowupArgs[@]}" -w "$AlohaWorkDir"
		ExitCode="$?"
		if [ "$ExitCode" != 0 ]
		then
			echo "${CmdName} : aloha_main.sh failed '${ExitCode}'" 1>&2
			continue
		fi

		LeftVolumeTxtFile="${AlohaWorkDir}/results/volumes_left.txt"
		RightVolumeTxtFile="${AlohaWorkDir}/results/volumes_right.txt"

		(echo "SessionScanDate,$BaselineSessionScanDate,$FollowupSessionScanDate"
		 cat "$LeftVolumeTxtFile")

		(echo "SessionScanDate,$BaselineSessionScanDate,$FollowupSessionScanDate"
		 cat "$RightVolumeTxtFile")
		
	    else
		echo "${CmdName} : Invalid session aloha arguments for '${FollowupSessionLabel}(${FollowupSessionId})'. Skipping" 1>&2
	    fi
	done
fi

exit
#
# Dict to CSV jq code from 
#    https://stackoverflow.com/questions/32960857/how-to-convert-arbitrary-simple-json-to-csv-using-jq
#
jq -r -f alohaSessionReport.jq /tmp/aloharun.json | jq -f alohaFlattenDict.jq | jq -s -r '(.[0] | keys_unsorted) as $keys | $keys, map([.[ $keys[] ]])[] | @csv'
p
