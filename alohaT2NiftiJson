#!/bin/bash

CmdName=$(basename "$0")

Syntax="${CmdName} {-a AlohaArgFlagName} {-c ClassificationMeasurement} [-f FakeStrings][-t GearTags][-n][-v] {SessionJsonFile}"

function sys {
    [ -n "${opt_n}${opt_v}" ] && echo "$@" 1>&2
    [ -n "$opt_n" ] || "$@"
}

while getopts a:c:f:nt:v arg
do
	case "$arg" in
	     a|c|f|n|t|v)
		eval "opt_${arg}='${OPTARG:=1}'"
		;;
	esac
done

shift $(("$OPTIND" - 1))

if [ -z "$1" ]
then
	echo "${CmdName} : Missing SessionJson file." 1>&2
	exit 1
fi
SessionJsonFile="$1"

SessionLabel=$(jq -r '.label' "$SessionJsonFile")
if [ -z "$SessionLabel" ] || [ "$SessionLabel" = 'null' ]
then
	echo "${CmdName} : can not find Session label in '$SessionJsonFile'" 1>&2
	exit 1
fi

SessionId=$(jq -r '._id' "$SessionJsonFile")
if [ -z "$SessionId" ] || [ "$SessionId" = 'null' ]
then
	echo "${CmdName} : can not find Session Id in '$SessionJsonFile'" 1>&2
	exit 2
fi

if [ -z "$opt_a" ]
then
	echo "${CmdName} : missing -a AlohaArgFlagName" 1>&2
	exit 3
fi
AlohaArgFlagName="$opt_a"


if ( echo "$AlohaArgFlagName" | grep -q 'T1' )
then
    ClassificationMeasurement=T1
else
    ClassificationMeasurement=T2
fi    

if echo "$AlohaArgFlagName" | grep -q 'Baseline'
then
	SessionType='Baseline'
elif echo "$AlohaArgFlagName" | grep -q 'Followup'
then
	SessionType='Followup'
else
	echo "${CmdName} : missing -a Baseline|Followup ArgFlagName" 1>&2
	exit 4
fi

GearTags=()
[ -n "$opt_t" ] && GearTags=( -t "$opt_t" )
    
FakeDcm2NiixGear="${SessionType}${ClassificationMeasurement}FakeDcm2NiixGear"			# fake running dcm2niix
FakeNecktrimGear="${SessionType}${ClassificationMeasurement}FakeNecktrimGear"			# fake running necktrim
IgnoreNiftiJson="${SessionType}${ClassificationMeasurement}IgnoreNiftiJson"   			# Missing Dicom, or Run dcm2niix, or fake run dcm2niix, Should run dcm2niix by default
IgnoreNiftiTrimmedJson="${SessionType}${ClassificationMeasurement}IgnoreNiftiTrimmedJson"   	# Missing Dicom, or Run dcm2niix, or fake run dcm2niix, Should run dcm2niix by default
IgnoreDicomJson="${SessionType}${ClassificationMeasurement}IgnoreDicomJson"			# Missing Dicom
RunDcm2NiixGear="${SessionType}${ClassificationMeasurement}RunDcm2NiixGear"   			# Run dcm2niix - should be the same as IgnoreNiftJson, explicitly says which gear to run
RunNecktrimGear="${SessionType}${ClassificationMeasurement}RunNecktrimGear"   			# Run necktrim - should be the same as IgnoreNiftJson, explicitly says which gear to run

#    opt_f=BaselineT2FakeDcm2NiixGear
#    opt_f=BaselineT2IgnoreDicomJson
#    opt_f=BaselineT2RunDcm2NiixGear
#    opt_f=BaselineIgnoreT2NiftiJson
 
#    NiftiJson=$(jq -r --argjson AlohaArgFlagName "\"$AlohaArgFlagName\"" --argjson ClassificationMeasurement "\"$ClassificationMeasurement\"" -f alohaFindT1T2.jq  "$SessionJsonFile" | jq -s -r '[sort_by(.FileTimestamp) | .[] | select( .FileType == "nifti" ) ] | last' )

function findT1T2FileJson {
    local AlohaArgFlagName="$1"
    local ClassificationMeasurement="$2"
    local SessionJsonFile="$3"
    
    jq -r --argjson AlohaArgFlagName "\"$AlohaArgFlagName\"" --argjson ClassificationMeasurement "\"$ClassificationMeasurement\"" -L . -f alohaFindT1T2.jq  "$SessionJsonFile"
}

    # *** will want the last one of these for T2 -- how to handle for T1-Trimmed?
    FileJson=$(findT1T2FileJson "$AlohaArgFlagName" "$ClassificationMeasurement" "$SessionJsonFile" )
    if [ -z "$FileJson" ] || [ "$FileJson" = 'null' ]
    then
	echo "${CmdName} : Can not find any ${ClassificationMeasurement} files in ${SessionJsonFile} for ${SessionLabel}" 1>&2
	SoughtForNiftiJson='{ "Missing": true }'
	echo "$SoughtForNiftiJson"
	exit 0
    fi
    
    if [ "$ClassificationMeasurement" = 'T1' ]
    then
        SoughtForNiftiJson=$( echo "$FileJson" | jq -s -r '[ .[] | select( ((.FileTags | any(. == "Trimmed"))) ) ] | last' )
    else
        SoughtForNiftiJson=$(echo "$FileJson" | jq -s -r '[ .[] | select(.FileType == "nifti") ]| last')
    fi

    if [ -z "$SoughtForNiftiJson" ] || [ "$SoughtForNiftiJson" = 'null' ] || ( [ -n "$opt_f" ] && (echo "$opt_f" | grep -q -E "${IgnoreNiftiJson}|${IgnoreDicomJson}|${FakeDcm2NiixGear}|${RunDcm2NiixGear}|${IgnoreNiftiTrimmedJson}|${FakeNecktrimGear}|${RunNecktrimGear}"))
    then
    	DicomJson=$(findT1T2FileJson "$AlohaArgFlagName" "$ClassificationMeasurement" "$SessionJsonFile" | jq -r 'select( (.FileType == "archive") or (.FileType == "dicom") ) ')
	if [ -z "$DicomJson" ] || [ "$DicomJson" = 'null' ] || ( [ -n "$opt_f" ] && (echo "$opt_f" | grep -q "$IgnoreDicomJson") )
	then
	    # There is no dicom to convert to nifti, so we're done
	    echo "${CmdName} : Missing \"${AlohaArgFlagName}\" for ${SessionLabel}(${SessionId}). Skipping" 1>&2
	    SoughtForNiftiJson='{ "Missing": true }'
	else
	    # There is a dicom to convert or fake converting
	    if [ -z "$opt_f" ] || (echo "$opt_f" | grep -q "$RunDcm2NiixGear") || ( echo "$opt_f" | grep -q -v "$FakeDcm2NiixGear")
	    then
		DicomFileId=$(echo "$DicomJson" | jq -r '.FileId')
		Dicom2NiftiJobId=$(sys fwRunGear -w "${GearTags[@]}" -g dcm2niix -i dcm2niix_input "$DicomFileId")
    		if [ "$?" != 0 ]
    		then
    		    echo "${CmdName} : fwRunGear failed fwRunGear -w '${GearTags[@]}' -g dcm2niix -i dcm2niix_input '$DicomFileId'" 1>&2
    		    exit 5
    		fi
		
		NiftiFileId=$(fwget -1 -j "$Dicom2NiftiJobId" | jq -r '.outputs[] | select(.type == "nifti") | .file_id')

		DicomTags=$(fwTag "$DicomFileId")

		[ -n "$DicomTags" ] && sys fwTag -q -t "$DicomTags" "$NiftiFileId"
		sys fwget -1 -raGz "$SessionId" > "$SessionJsonFile"
	    else
		DicomFileId=$(echo "$DicomJson" | jq -r .'FileId')
		echo "${CmdName} : Faking fwRunGear -w ${GearTags[@]} -g dcm2niix -i dcm2niix_input \"${DicomFileId}\"" 1>&2
	    fi

	    if [ "$ClassificationMeasurement" = 'T1' ]
	    then
		if [ -z "$opt_f" ] || ( echo "$opt_f" | grep -q "$RunNecktrimGear") || ( echo "$opt_f" | grep -q -v "$FakeNecktrimGear")
		then
		    NecktrimJobId=$(sys fwRunGear -w -t "$GearTags" -g 'necktrim' -i 'file' "$NiftiFileId")
                    if [ "$?" != 0 ]
                    then
                         echo "${CmdName} : fwRunGear failed fwRunGear -w -t '$GearTags' -g 'necktrim' -i 'file' '$NiftiFileId'" 1>&2
			 exit 1
                    fi

                    T1NiftiTrimmedFileId=$(fwget -1 -j "$NecktrimJobId" | jq -r '.outputs[] | select(.type == "nifti") | .file_id')

                    T1NiftiTags=$(fwTag "$T1NiftiTrimmedFileId")
                    [ -n "$T1NiftiTags" ] && sys fwTag -q -t "$T1NiftiTags" "$T1NiftiTrimmedFileId"
		
                    sys fwget -1 -raGz "$SessionId" > "$SessionJsonFile"
                else
                    echo Faking fwRunGear -w -t "$GearTags" -g 'necktrim' -i 'file' "$T1NiftiFileId" 1>&2
	        fi
	    	SoughtForNiftiJson=$( findT1T2FileJson "$AlohaArgFlagName" "$ClassificationMeasurement" "$SessionJsonFile" | jq -r 'select( (.FileType == "nifti") and (.FileTags | any(. == "Trimmed")) )' )
	    else
	    	SoughtForNiftiJson=$( findT1T2FileJson "$AlohaArgFlagName" "$ClassificationMeasurement" "$SessionJsonFile" | jq -r 'select( .FileType == "nifti" )' )
	    fi
	fi
    fi

    echo "$SoughtForNiftiJson"

